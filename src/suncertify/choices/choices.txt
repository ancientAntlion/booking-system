1. When looking up records in the DB or writing to the DB, I took the "recNo" variable at face value.

Description :
I look up the record at that row in the file regardless of previous "flags"
In the event that the record at that index in the DB file is marked as deleted, I return a RecordNotFoundException

Reason :
The alternative was to read the "flag" byte at the beginning of each record in order to determine if each record existed
before incrementing the "counter" used to search for the 'n'th record. If the number of rows in the DB file increased 
significantly then this would either cause extra time in the file reader, increasing lock time, blocking out other bookings
OR alternatively it would require reading of large amounts of "DB" data into memory.


2. Decided to use a combination of the "Name" and "Location" as a key for the DB

Description : 
Since I am not using a local memory cache, and there is no "unique key" in the DB schema, I decided name + address should suffice.


3. 

DuplicateKeyException


a) Nothing is specified in the spec as the "keys", and even the use of every single field besides the customer number is
	not enough to be used as a key because a hotel on a street could have numerous rooms that have all the same 
	criteria.
	
b) DuplicateKeyException throws from the create, but not the delete method in the spec. So from a business logic point of
	view someone could call update() on the DB with the exact same values as an existing record. This could cause a lot of
	problems for client or server side business logic relying on DuplicateKeyException when the consistency of duplication
	in the DB can easily be compromised.